div.col-md-12
  h2 Data Storage
  p Verilog requires you to declare how data will be stored before storing it. There are many different ways to store and access data in Verilog. The most important difference between data storage in Verilog and other languages is that Verilog is designed for digital simulation and logic connection, so it requires you to specify the bit width of each variable or net.

  h3 Variables
  p Verilog variables are similar to variables in other programming languages. You can assign values to and read values from variables.
  p The most commonly-used variable type is <code>reg</code>.
  p Declaring a <code>reg</code>-type variable named <code>my_reg</code> with a width of 8 bits:
  pre: code.verilog reg [7:0] my_reg;
  p Declaring two variables named <code>my_reg_a</code> and <code>my_reg_b</code>, each with a width of 3 bits:
  pre: code.verilog reg [2:0] my_reg_a, my_reg_b;
  p Filling <code>my_reg</code> with the binary value <code>10101101</code>:
  pre: code.verilog my_reg = 8'b10101101;
  p Above, the prefix <code>8'b</code> signifies the following:
  ul
    li <code>'b</code>: The number to follow is a <strong>binary value</strong>
    li <code>8</code>: The bit length of the following value is <strong>exactly 8 bits wide</strong>
  p If we leave out the <code>8</code> and simply specify <code>'b10101101</code>, the compiler will assume our number is at least 8 bits and treat it as if we included a bit width prefix of <code>8</code>.

  h3 Nets
  p Nets are a way to transfer data between two points. The most commonly-used net type is <code>wire</code>.
  p Nets are different from variables in that they cannot be programatically drivenâ€”you can't put a net on the left side of an assignment statement (you can't set it to a value using <code>=</code>). For example, the following will fail to compile:
  pre: code.verilog
    | wire [7:0] my_wire;
    | my_wire = 8'b10101101;
  p The most common way to "get data into" a net is by using the <code>assign</code> statement. In the example below, <code>output_wire</code> will always have the same value as <code>input_wire</code> because the <code>assign</code> statement guarantees that the wire will always carry the result of that statement:
  pre: code.verilog
    | wire [7:0] input_wire
    | wire [7:0] output_wire;
    | assign input_wire = output_wire;

  h3 Variables vs. Nets
  p You should use a variable when you want to explicitly set the value of something.
  p For example, if you write a complex algorithm and want to display the result on an output pin, you could assign it as shown:
  div.ace-verilog: include ../code/_var-vs-net-1.v
  p You can use a net to display simple logic consistently without having to worry about clock edges.
  p For example, here's how to build a basic 3-input AND gate using the <code>assign</code> statement:
  div.ace-verilog: include ../code/_var-vs-net-2.v
